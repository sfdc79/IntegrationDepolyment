/**
 * @description       : 
 * @author            : Mandeep
 * @group             : 
 * @last modified on  : 18-Apr-2022
 * @last modified by  : Aman Gupta(Nagarro)
**/
global class Utils {
  
	

	global static Map<String, String> getPicklistValueMap(Schema.DescribeFieldResult fieldResult) {
		Map<String, String> picklistLabelValueMap = new Map<String, String>();
		for (Schema.PicklistEntry pickListValuesRecord : fieldResult.getPicklistValues()) {
			picklistLabelValueMap.put(pickListValuesRecord.getValue(), pickListValuesRecord.getLabel());
		}
		return picklistLabelValueMap;
	}

	global static void sendEmail(List<String> toMail, List<String> ccMail, String subject, String mailbody){
        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
        
        email.setToAddresses(toMail);
        if(ccMail!=null)
            email.setCcAddresses(ccMail);
        // if(repmail!=null && repmail!= '')
        //     email.setInReplyTo(repMail);
        
        email.setSubject(subject);
        email.setHtmlBody(mailbody);
        //email.setHtmlBody('Hello, <br/><br/>This is the test mail that you generated. <br/>The Email Id for which this mail was generated by '+toMail+'<br/><br/>Regards<br/> Developer');
        try{
            Messaging.sendEmail(new Messaging.SingleEmailMessage[] { email });
        }catch(exception e){
            // MA_LogHandler.addApexLog(
			// 	'MA_SendEmail',
			// 	'sendEmail',
			// 	e.getLineNumber(),
			// 	e.getStackTraceString(),
			// 	e.getMessage()
			// );
        }
	}

/*  This method is used for returning the converted currency Invocable
	@InvocableMethod(label='Convert Currency' description='Update the currency to outputCurrency passed.')
	global static List<Decimal> currencyConvertorInvocable(List<ConversionDetails> conversionData){

		Map<String, Decimal> exchangeRateMap = New Map<String, Decimal>();
		List<Decimal> convertedCurrency = new List<Decimal>();

        for(CurrencyType curr : [SELECT ISOCode, ConversionRate FROM CurrencyType WHERE IsActive=TRUE]){
            exchangeRateMap.put(curr.ISOCode, curr.ConversionRate);            
        }
        Decimal outputRate=Decimal.valueOf(String.valueOf(exchangeRateMap.get(conversionData[0].outputCurrencyIsoCode)))
                            /Decimal.valueOf(String.valueOf(exchangeRateMap.get(conversionData[0].inputCurrencyIsoCode)));
			convertedCurrency.add((conversionData[0].initialAmount * outputRate).setScale(2));
			return convertedCurrency;
                        // return outputRate;
	}
*/
	
	global class ConversionDetails {
        @InvocableVariable(required=true)
        global String inputCurrencyIsoCode;
        
        @InvocableVariable(required=true)
        global String outputCurrencyIsoCode;
        
        @InvocableVariable(required=true)
        global Decimal initialAmount;
    }
}